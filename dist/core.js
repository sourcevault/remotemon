// Generated by LiveScript 1.6.0
(function(){
  var reg, com, print, data, metadata, defsymbol, l, z, j, R, readJson, readYaml, be, hop, exec, fs, chokidar, c, lit, createRsyncCmd, cast, main, entry;
  reg = require("./registry");
  com = reg.com, print = reg.print, data = reg.data, metadata = reg.metadata;
  defsymbol = Symbol("default");
  l = com.l, z = com.z, j = com.j, R = com.R;
  readJson = com.readJson, readYaml = com.readYaml, be = com.be, hop = com.hop, exec = com.exec, fs = com.fs;
  chokidar = com.chokidar, c = com.c, lit = com.lit;
  createRsyncCmd = function(data){
    var rsync, str, i$, ref$, len$, I, key;
    rsync = data.rsync;
    str = "";
    for (i$ = 0, len$ = (ref$ = rsync.flags).length; i$ < len$; ++i$) {
      I = ref$[i$];
      switch (typeof I) {
      case 'string':
        str += "--" + I + " ";
        break;
      case 'object':
        key = Object.keys(I)[0];
        str += key + "=" + "\"" + I[key] + "\"" + " ";
      }
    }
    return "rsync " + str + rsync.src + " " + (data.remotehost + ":" + data.remotefold);
  };
  cast = function(data, buildname, filename, verbose){
    return function(){
      var name, i$, ref$, len$, I, rsyncCmd, str, cmd, results$ = [];
      name = metadata.name;
      if (!(data.localbuild.length === 0)) {
        lit(["[" + name + "][ localbuild ]" + buildname + " "], [c.ok, c.warn]);
      }
      for (i$ = 0, len$ = (ref$ = data.localbuild).length; i$ < len$; ++i$) {
        I = ref$[i$];
        if (verbose) {
          l("> " + I);
        }
        try {
          l(exec(I));
        } catch (e$) {}
      }
      rsyncCmd = createRsyncCmd(data);
      str = [data.rsync.src, "->", "[ " + data.rsync.des.join(" ") + " ]"].join(" ");
      if (verbose) {
        lit(["[" + name + "][      rsync ]" + buildname + " ", str], [c.ok, c.warn]);
        l("> " + rsyncCmd);
      } else {
        lit(["[" + name + "][      rsync ]" + buildname + " ", str], [c.ok, c.warn]);
        try {
          l(exec(rsycnCmd));
        } catch (e$) {}
      }
      try {
        str = data.remotehost + " " + data.remotefold;
        lit(["[" + name + "][ remotetask ]" + buildname + " ", str], [c.ok, c.warn]);
        for (i$ = 0, len$ = (ref$ = data.remotetask).length; i$ < len$; ++i$) {
          I = ref$[i$];
          cmd = "ssh " + data.remotehost + " \"" + ("cd " + data.remotefold + ";") + I + "\"";
          if (verbose) {
            l("> " + cmd);
          }
          try {
            results$.push(l(exec(cmd)));
          } catch (e$) {}
        }
        return results$;
      } catch (e$) {}
    };
  };
  main = function(data, buildname, filename, verbose){
    var cmdtext, G;
    cmdtext = (function(){
      switch (buildname) {
      case defsymbol:
        return "";
      default:
        return "[" + buildname + "]";
      }
    }());
    G = cast(data, cmdtext, filename, verbose);
    lit(["[" + metadata.name + "][   watching ]" + cmdtext + " ", data.watch.join(' , ') + ""], [c.ok, c.warn]);
    chokidar.watch(data.watch, data.chokidar).on('change', G);
    if (data.initialize) {
      return G();
    }
  };
  entry = hop.wh(function(data){
    return data.cmd.length === 0;
  }, function(data){
    return main(data.def, defsymbol, data.filename, data.verbose);
  }).def(function(data){
    var user, i$, ref$, len$, key, results$ = [];
    l(c.warn("[" + metadata.name + "] " + metadata.version));
    user = data.user;
    for (i$ = 0, len$ = (ref$ = data.cmd).length; i$ < len$; ++i$) {
      key = ref$[i$];
      results$.push(main(user[key], key, data.filename, data.verbose));
    }
    return results$;
  });
  reg.core = entry;
}).call(this);
