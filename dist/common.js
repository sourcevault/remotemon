// Generated by LiveScript 1.6.0
(function(){
  var fs, flyd, R, jsYaml, hop, chokidar, cc, be, optionator, prettyError, child_process, jspc, l, z, execSync, exec, noop, j, readYaml, readJson, pe, showStack, lit, x$, c, main;
  fs = require("fs");
  flyd = require("flyd");
  R = require("ramda");
  jsYaml = require('js-yaml');
  hop = require("hoplon");
  chokidar = require("chokidar");
  cc = require("cli-color");
  be = require("valleydate");
  optionator = require("optionator");
  prettyError = require("pretty-error");
  child_process = require("child_process");
  jspc = require("@aitodotai/json-stringify-pretty-compact");
  l = console.log;
  z = l;
  execSync = require("child_process").execSync;
  exec = function(cmd){
    return execSync(cmd).toString();
  };
  noop = function(){};
  j = function(x){
    return l(jspc(x, {
      maxLength: 30,
      margins: true
    }));
  };
  readYaml = function(name){
    return jsYaml.safeLoad(fs.readFileSync(name));
  };
  readJson = function(filename){
    return JSON.parse(
    R.toString(
    fs.readFileSync(filename)));
  };
  pe = new prettyError();
  pe.skipNodeFiles();
  pe.filterParsedError(function(Error){
    Error._trace = R.takeLast(6, Error._trace);
    return Error;
  });
  pe.skip(function(traceLine, lineNumber){
    if (traceLine.dir === "internal/modules/cjs") {
      return true;
    }
    if (traceLine.dir === "internal/modules") {
      return true;
    }
    if (R.includes("valleydate", traceLine.packages)) {
      return true;
    }
    return false;
  });
  pe.appendStyle({
    "pretty-error > header > title > kind": {
      display: "none"
    },
    "pretty-error > header > colon": {
      display: "none"
    },
    "pretty-error > header > message": {
      display: "none"
    }
  });
  showStack = function(){
    var str;
    str = pe.render(new Error());
    l(str);
  };
  lit = function(strs, cols){
    var diff, I, In;
    if (strs.length > cols.length) {
      diff = strs.length - cols.length;
      I = cols.length;
      In = strs.length;
      while (I < In) {
        cols[I] = null;
        I += 1;
      }
    }
    return lit.internal(strs, cols);
  };
  lit.internal = R.pipe(R.zipWith(function(x, f){
    switch (R.type(f)) {
    case 'Function':
      return f(x);
    default:
      return x;
    }
  }), R.join(""), console.log);
  x$ = c = {};
  x$.ok = cc.xterm(2);
  x$.er1 = cc.xterm(3);
  x$.er2 = cc.xterm(13);
  x$.er3 = cc.xterm(1);
  x$.warn = cc.xterm(11);
  x$.grey = cc.xterm(8);
  main = {
    j: j,
    z: z,
    R: R,
    l: l,
    c: c,
    be: be,
    fs: fs,
    lit: lit,
    hop: hop,
    exec: exec,
    flyd: flyd,
    noop: noop,
    jsYaml: jsYaml,
    chokidar: chokidar,
    readYaml: readYaml,
    readJson: readJson,
    optionator: optionator,
    showStack: showStack,
    prettyError: prettyError,
    child_process: child_process
  };
  module.exports = main;
}).call(this);
